@page "/Register"
@inject HttpClient Http
@using System.Text.RegularExpressions
@using DataBaseLayer.DTOs
@rendermode InteractiveWebAssembly

<MyMudProviders />

<h3>Register</h3>

<MudForm Model="@model" @bind-IsValid="@success" OnValidSubmit="RegisterUser">
    <MudTextField T="string" Label="Username" @bind-Value="model.Username" Required="true" RequiredError="User name is required!"/>
    <MudTextField T="string" Label="Password" @bind-Value="model.Password" HelperText="Choose a strong password" @ref="pwField1"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                      RequiredError="Password is required!"/>
    <MudTextField T="string" Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                  Validation="@(new Func<string, string>(PasswordMatch))"/>
    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
    </div>
</MudForm>

@code {
    LoginDTO model = new LoginDTO();
    private bool success;
    private MudTextField<string> pwField1; 
    
    private IEnumerable<string> PasswordStrength(string pw)
        {
            if (string.IsNullOrWhiteSpace(pw))
            {
                yield return "Password is required!";
                yield break;
            }
            if (pw.Length < 8)
                yield return "Password must be at least of length 8";
            if (!Regex.IsMatch(pw, "[A-Z]"))
                yield return "Password must contain at least one capital letter";
            if (!Regex.IsMatch(pw, "[a-z]"))
                yield return "Password must contain at least one lowercase letter";
            if (!Regex.IsMatch(pw, "[0-9]"))
                yield return "Password must contain at least one digit";
        }
    
        private string? PasswordMatch(string arg)
        {
            return pwField1.Value != arg ? "Passwords don't match" : null;
        }

        private async Task RegisterUser()
        {
            var res = await Http.PostAsJsonAsync("api/user/register", model);
        }

}