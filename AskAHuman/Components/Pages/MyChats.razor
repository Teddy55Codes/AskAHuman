@page "/MyQuestions"
@using AskAHuman.Services.Interfaces
@using DataBaseLayer.DTOs
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthenticationService AuthenticationService
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<PageTitle>My Questions</PageTitle>


<h1>My Questions</h1>
<MudButton Class="my-3" Variant="Variant.Filled" Color="Color.Primary" hidden="@(AuthenticationService.AuthenticatedUser is null)" OnClick="@(() => NavigationManager.NavigateTo("/Questions/Create"))">Create New Question</MudButton>

<MudText hidden="@(AuthenticationService.AuthenticatedUser is not null)">You need to be logged in to have/create questions.</MudText>
<div hidden="@(AuthenticationService.AuthenticatedUser is null)">
    <h2 class="mt-10 mb-3" hidden="@(currentChats.Count == 0)">Active Questions</h2>
    <ChatCards Chats="@(currentChats)"/>

    <h2 class="mt-10 mb-3" hidden="@(completedChats.Count == 0)">Completed Questions</h2>
    <ChatCards Chats="@(completedChats)" ShowIcons="true"/>
</div>



@code {
    private List<ChatCardDTO> currentChats = new();
    private List<ChatCardDTO> completedChats = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.AuthenticatedUser is not null || await AuthenticationService.AuthenticateViaLocalStorage(ProtectedLocalStorage))
        {
            currentChats = ChatService.GetUsersActiveChatsAsCards((long)AuthenticationService.AuthenticatedUser!);
            completedChats = ChatService.GetUsersCompletedChatsAsCards((long)AuthenticationService.AuthenticatedUser);
        }
    }
}