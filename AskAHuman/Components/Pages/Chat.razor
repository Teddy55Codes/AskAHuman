@using AskAHuman.Services.Interfaces
@using DataBaseLayer.DTOs
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IChatService ChatService
@inject IAuthenticationService AuthenticationService
@inject IMessageService MessageService
@inject ILiveMessageService LiveMessageService
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

@page "/Questions/{chatId:long}"

<MudText Class="ml-2" Color="@Color.Error" hidden="@(!isNotFound)" >Question does not exist.</MudText>

<MudGrid Class="mt-1" hidden="@isNotFound">
    <MudCard Class="ml-3" hidden="@(chat.UsersAnswererId is not null ||
                                    AuthenticationService.AuthenticatedUser is null ||
                                    AuthenticationService.AuthenticatedUser == chat.UsersQuestioningId)">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="JoinChat">Join as Answerer</MudButton>
    </MudCard>
    <MudCard Class="ml-3" hidden="@(chat.UsersAnswererId is null ||
                                    AuthenticationService.AuthenticatedUser is null ||
                                    AuthenticationService.AuthenticatedUser != chat.UsersAnswererId)">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LeaveChat">Leave question</MudButton>
    </MudCard>
    <MudItem xs="12">
        <MudCard Elevation="2" Class="pa-2">
            <h1 Class="mx-3 my-6">@chat.Title</h1>
            <MudText Class="ma-6 flex-wrap">@chat.Question</MudText>
        </MudCard>
    </MudItem>
    <MudItem Class="d-flex" xs="12">
        @foreach (var message in messages)
        {
            @if (message.AuthorId == AuthenticationService.AuthenticatedUser)
            {
                <MudCard Class="align-self-end pa-1 my-2" Elevation="2">
                    <h3 Class="mx-3 mb-6 mt-3">@message.AuthorName</h3>
                    <MudText Class="mx-3 my-3">@message.Message</MudText>
                </MudCard>
            }
            else
            {
                <MudCard Class="align-self-start pa-1 my-2" Elevation="2">
                    <h3 Class="mx-3 mb-6 mt-3">@message.AuthorName</h3>
                    <MudText Class="mx-3 my-3">@message.Message</MudText>
                </MudCard>
            }
        }
    </MudItem>
    <MudItem xs="12" Elevation="2">
        <MudCard hidden="@(AuthenticationService.AuthenticatedUser is null || (AuthenticationService.AuthenticatedUser != chat.UsersAnswererId && AuthenticationService.AuthenticatedUser != chat.UsersQuestioningId))">
            <EditForm Model="@model" OnValidSubmit="SendChatMessage">
                <DataAnnotationsValidator/>
                <MudGrid Class="align-center">
                    <MudItem xs="11">
                        <MudCardContent>
                            <MudTextField Label="Message" Variant="Variant.Outlined" @bind-Value="model.message" For="@(() => model.message)"/>
                        </MudCardContent>
                    </MudItem>
                    <MudItem xs="1">
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Primary" ButtonType="ButtonType.Submit"/>
                        </MudCardActions>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCard>
    </MudItem>
</MudGrid>



@code {
    [Parameter]
    public long ChatId { get; set; }
    
    public TextMessage model = new();

    private bool isNotFound;
    private string currentMessage;

    private DatabaseLayer.Entities.Chat? chat;
    private List<MessageDTO> messages;

    public class TextMessage
    {
        public string message { get; set; }
    }
    
    private void SendChatMessage()
    {
        if (string.IsNullOrEmpty(model.message) || AuthenticationService.AuthenticatedUser is null) return;
        LiveMessageService.SendMessageToChat(model.message, (long)AuthenticationService.AuthenticatedUser);
        model = new();
    }

    private void JoinChat()
    {
        if (AuthenticationService.AuthenticatedUser is null) return;
        var result = ChatService.ClaimChat((long)AuthenticationService.AuthenticatedUser, ChatId);
        
        if (result.IsSuccess)
        {
            NavigationManager.Refresh(true);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
        }
    }

    private void LeaveChat()
    {
        var result = ChatService.RemoveAnswererFromChat(ChatId);
        
        if (result.IsSuccess)
        {
            NavigationManager.Refresh(true);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        chat = ChatService.GetChatById(ChatId);
        if (chat is null)
        {
            isNotFound = true;
            return;
        }
        messages = MessageService.GetMessagesForChatById(ChatId);   
        
        if (AuthenticationService.AuthenticatedUser is not null || await AuthenticationService.AuthenticateViaLocalStorage(ProtectedLocalStorage))
        {
            StateHasChanged();
            
            LiveMessageService.SetInformation(ChatId, (long)AuthenticationService.AuthenticatedUser);
            LiveMessageService.OnMessageReceived += MessageReceived;
        }
    }

    private void MessageReceived(MessageDTO message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (LiveMessageService is IDisposable disposable) disposable.Dispose();
    }
}