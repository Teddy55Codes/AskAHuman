@using AskAHuman.Services.Interfaces
@using DataBaseLayer.DTOs
@using DatabaseLayer.Entities.Enums
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IChatService ChatService
@inject IAuthenticationService AuthenticationService
@inject IMessageService MessageService
@inject ILiveMessageService LiveMessageService
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

@page "/Questions/{chatId:long}"

<PageTitle>Question</PageTitle>


<MudText Class="ml-2" Color="@Color.Error" hidden="@(!isNotFound)">Question does not exist.</MudText>

<MudGrid Class="d-flex flex-column flex-nowrap flex-grow-1 gap-4 mt-1" hidden="@isNotFound">
    <div class="d-flex" hidden="@(AuthenticationService.AuthenticatedUser is null || chat is null || chat.State != ChatState.Open)">
        <div Class="ml-3" hidden="@(chat.UsersAnswererId is not null || 
                                    AuthenticationService.AuthenticatedUser == chat.UsersQuestioningId)">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="JoinChat">Join as Answerer</MudButton>
        </div>
        <div Class="ml-3" hidden="@(chat.UsersAnswererId is null || 
                                    AuthenticationService.AuthenticatedUser != chat.UsersAnswererId)">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="LeaveChat">Leave question</MudButton>
        </div>
        <div Class="ml-3" hidden="@(AuthenticationService.AuthenticatedUser != chat.UsersQuestioningId || 
                                    chat.UsersAnswererId is null)">
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => CloseQuestion(true))">Approve Answer</MudButton>
        </div>
        <div Class="ml-3" hidden="@(AuthenticationService.AuthenticatedUser != chat.UsersQuestioningId)">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => CloseQuestion(false))">Close Question</MudButton>
        </div>
    </div>
    <div>
        <MudCard Elevation="2" Class="pa-2">
            <h1 Class="mx-3 my-6">@chat?.Title</h1>
            <p Class="ma-6 flex-wrap preserve-white-space">@chat?.Question</p>
        </MudCard>
    </div>
    <MudItem id="chat-messages" Class="flex-1" xs="12">
        <div class="d-flex flex-column flex-nowrap">
            @foreach (var message in messages)
            {
                @if (message.AuthorId == AuthenticationService.AuthenticatedUser)
                {
                    <MudCard Class="max-width align-self-end pa-1 my-2" Elevation="2">
                        <MudItem Class="mx-3 my-3">
                            <p id="you-message" class="author">You</p>
                            <p class="preserve-white-space">@message.Message</p>
                        </MudItem>
                    </MudCard>
                }
                else
                {
                    <MudCard Class="max-width align-self-start pa-1 my-2" Elevation="2">
                        <MudItem Class="mx-3 my-3">
                            <p class="author">@message.AuthorName</p>
                            <p class="preserve-white-space">@message.Message</p>
                        </MudItem>
                    </MudCard>
                }
            }
        </div>
    </MudItem>
    <div hidden="@(AuthenticationService.AuthenticatedUser is null || 
                   chat is null || 
                   chat.State != ChatState.Open ||
                   (AuthenticationService.AuthenticatedUser != chat?.UsersAnswererId && 
                    AuthenticationService.AuthenticatedUser != chat?.UsersQuestioningId))">
        <MudCard Class="px-4">
            <EditForm Model="@model" OnValidSubmit="SendChatMessage">
                <DataAnnotationsValidator/>
                <MudGrid Class="d-flex flex-nowrap">
                    <MudItem Class="flex-grow-1">
                        <MudTextField Label="Message" Lines="3" Variant="Variant.Outlined" @bind-Value="model.message" For="@(() => model.message)"/>
                    </MudItem>
                    <MudItem Class="px-0 py-5 align-self-center ">
                        <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Primary" ButtonType="ButtonType.Submit"/>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCard>
    </div>
</MudGrid>


@code {
    [Parameter] public long ChatId { get; set; }

    public TextMessage model = new();

    private bool isNotFound;
    private string currentMessage;

    private DatabaseLayer.Entities.Chat? chat;
    private List<MessageDTO> messages;

    public class TextMessage
    {
        public string message { get; set; }
    }

    private void SendChatMessage()
    {
        if (chat is null || chat.State != ChatState.Open)
        {
            Snackbar.Add("Question is not available.", Severity.Error);
            return;
        }
        if (string.IsNullOrEmpty(model.message) || AuthenticationService.AuthenticatedUser is null || 
            (AuthenticationService.AuthenticatedUser != chat?.UsersQuestioningId && AuthenticationService.AuthenticatedUser != chat?.UsersAnswererId)) return;
        LiveMessageService.SendMessageToChat(model.message, (long)AuthenticationService.AuthenticatedUser);
        model = new();
    }

    private void JoinChat()
    {
        if (AuthenticationService.AuthenticatedUser is null) return;
        var result = ChatService.ClaimChat((long)AuthenticationService.AuthenticatedUser, ChatId);

        if (result.IsSuccess)
        {
            NavigationManager.Refresh(true);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
        }
    }

    private void CloseQuestion(bool wasSolved)
    {
        if (AuthenticationService.AuthenticatedUser is null) return;
        var result = ChatService.CompleteChat((long)AuthenticationService.AuthenticatedUser, ChatId, wasSolved);
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
        }
    }

    private void LeaveChat()
    {
        var result = ChatService.RemoveAnswererFromChat(ChatId);

        if (result.IsSuccess)
        {
            NavigationManager.Refresh(true);
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        chat = ChatService.GetChatById(ChatId);
        if (chat is null)
        {
            isNotFound = true;
            return;
        }

        messages = MessageService.GetMessagesForChatById(ChatId);

        if (AuthenticationService.AuthenticatedUser is not null || await AuthenticationService.AuthenticateViaLocalStorage(ProtectedLocalStorage))
        {
            StateHasChanged();

            LiveMessageService.SetInformation(ChatId, (long)AuthenticationService.AuthenticatedUser!);
            LiveMessageService.OnMessageReceived += MessageReceived;
        }
    }

    private void MessageReceived(MessageDTO message)
    {
        messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (LiveMessageService is IDisposable disposable) disposable.Dispose();
    }

}