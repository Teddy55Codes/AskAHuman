@page "/Questions/Create"
@using System.ComponentModel.DataAnnotations
@using AskAHuman.Services.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthenticationService AuthenticationService
@inject IChatService ChatService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<PageTitle>Create Question</PageTitle>

<h1 Class="my-2">Create A New Question</h1>

<MudText Class="my-2">To create a new question fill out the form below.</MudText>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Question Title" Variant="Variant.Text"
                          @bind-Value="model.Title" For="@(() => model.Title)"/>
            <MudTextField Label="Question" Variant="Variant.Text" Lines="15"
                          @bind-Value="model.Question" For="@(() => model.Question)"/>
        </MudCardContent>
        <MudCardActions>
            <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I confirm that this is a legitimate question which is being submitted with no ill intent."/>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit Question</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    QuestionForm model = new QuestionForm();

    private bool isError;

    public class QuestionForm
    {
        [Required]
        [StringLength(400, ErrorMessage = "Question title must be between 20 and 400 characters long.", MinimumLength = 20)]
        public string Title { get; set; }

        [Required]
        [StringLength(2_000, ErrorMessage = "Question must be between 20 and 2,000 characters long.", MinimumLength = 20)]
        public string Question { get; set; }
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.AuthenticatedUser is null)
        {
            await AuthenticationService.AuthenticateViaLocalStorage(ProtectedLocalStorage);
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        if (model.Title.Length is > 400 or < 20) return;
        if (model.Question.Length is > 2_000 or < 20) return;

        if (AuthenticationService.AuthenticatedUser is not null)
        {
            var chat = ChatService.CreateNewChat((long)AuthenticationService.AuthenticatedUser, model.Title, model.Question);
            if (chat.IsSuccess)
            {
                NavigationManager.NavigateTo($"/Questions/{chat.Value.Id}");
                Snackbar.Add("Created New Question", Severity.Success);
            }
            else
            {
                foreach (var error in chat.Errors)
                {
                    Snackbar.Add(error.Message, Severity.Error);
                }
            }
            
            return;
        }
        Snackbar.Add("You need to be logged in to create questions", Severity.Error);
    }

}