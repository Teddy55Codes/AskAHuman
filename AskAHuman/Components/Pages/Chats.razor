@page "/Chats"
@using AskAHuman.Services.Interfaces
@using DataBaseLayer.DTOs
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthenticationService AuthenticationService
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<h1>Chats</h1>

<MudButton Class="my-3" Variant="Variant.Filled" Color="Color.Primary" hidden="@(AuthenticationService.AuthenticatedUser is null)" OnClick="@(() => NavigationManager.NavigateTo("/Chats/Create"))">Create New Chat</MudButton>
@foreach (var chat in currentChats)
{
    <MudCard Class="my-3" Elevation="2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Class="flex-wrap" Typo="Typo.h6">@(chat.Title.Length > 50 ? chat.Title[..50] + "..." : chat.Title)</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Class="flex-wrap">@(chat.Question.Length > 100 ? chat.Question[..100] + "..." : chat.Question)</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudLink Href="@("/Chats/" + chat.id)">Open Chat</MudLink>
        </MudCardActions>
    </MudCard>
}

@code {
    private List<ChatCardDTO> currentChats = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.AuthenticatedUser is null)
        {
            await AuthenticationService.AuthenticateViaLocalStorage(ProtectedLocalStorage);
        }
        
        currentChats = ChatService.GetAllChatsAsCards();
    }

}