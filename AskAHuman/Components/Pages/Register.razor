@page "/Register"

@using System.ComponentModel.DataAnnotations
@using AskAHuman.Services.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IUserService UserService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudGrid Class="mt-1">
        <MudItem xs="3"/>
        <MudItem xs="6">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username"
                                  @bind-Value="model.Username" For="@(() => model.Username)" Validation="@validateUserName" OnlyValidateIfDirty="true"/>
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                    <MudTextField Label="Confirm Password" Class="mt-3"
                                  @bind-Value="model.ConfirmationPassword" For="@(() => model.ConfirmationPassword)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="3"/>
    </MudGrid>

</EditForm>

@code {
    RegisterAccountForm model = new RegisterAccountForm();

    private string? validateUserName(string userName) => UserService.UserExists(userName) ? "User already exists" : null;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(20, ErrorMessage = "Name length can't be more than 20 characters.")]
        public string Username { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be between 8 and 30 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required(ErrorMessage = "The Confirm Password field is required")] 
        [Compare(nameof(Password))] 
        public string ConfirmationPassword { get; set; }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (UserService.UserExists(model.Username)) return;
        if (model.Password != model.ConfirmationPassword) return;
        if (model.Password.Length is < 8 or > 30) return;

        AuthenticationService.Register(model.Username, model.Password);
        await ProtectedLocalStorage.SetAsync("Jwt", AuthenticationService.Login(model.Username, model.Password)!);
        NavigationManager.NavigateTo("/", true);
    }

}